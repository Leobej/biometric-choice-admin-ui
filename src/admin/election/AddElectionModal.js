import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router";

const AddElectionModal = ({ isOpen, closeModal, showNotification }) => {
  const [description, setDescription] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [candidateId, setCandidateId] = useState("");
  const [location, setLocation] = useState("");
  const [locations, setLocations] = useState([]);

  const [searchQuery, setSearchQuery] = useState("");
  const [searchResult, setSearchResult] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCandidate, setSelectedCandidate] = useState(null);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [candidates, setCandidates] = useState([]);
  const navigate = useNavigate();

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const token = localStorage.getItem("token");
      const electionData = {
        // Assuming you have state hooks or some way to collect voterId and candidateId
        // This should be set somewhere in your state, or retrieved from context/user
        candidateId: selectedCandidate ? selectedCandidate.candidateId : null, // Set this from the selected candidate
        description,
        location, // Make sure you have an input field for location in your form
        startDate: new Date(startDate).toISOString(), // Assuming startDate is when the election is created
        endDate: new Date(endDate).toISOString(), // Assuming endDate is when the election is created
        active: true, // Set this according to your form or component state if needed
        // electionId is not included as it will be generated by the backend
      };

      const response = await axios.post(
        "http://localhost:8080/elections",
        electionData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.status === 201 || response.status === 200) {
        showNotification("Election created successfully!", "success");
        resetForm(); // Reset the form fields
        closeModal(); // Close the modal
        // Optionally, you can also call a function to refresh the list of elections here if it's available in the parent component
      } else {
        // Handle non-successful responses
        showNotification("Failed to create election", "error");
      }
    } catch (error) {
      console.error("Failed to create election:", error);
      showNotification("Error creating election. Please try again.", "error");
    }
  };

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      navigate("/login");
    }
  }, [navigate]);

  useEffect(() => {
    const fetchCandidates = async () => {
      const token = localStorage.getItem("token");
      try {
        const response = await axios.get(`http://localhost:8080/candidates`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        console.log("Fetched candidates:", response.data); // Log the response

        // Access the 'content' field of the response data
        if (response.data && Array.isArray(response.data.content)) {
          setCandidates(response.data.content);
        } else {
          console.error(
            "Expected an array for candidates in 'content', received:",
            response.data
          );
          setCandidates([]); // Set to empty array if the 'content' field is not an array
        }
      } catch (error) {
        console.error("Error fetching candidates:", error);
        setCandidates([]); // Set to empty array on error
      }
    };

    fetchCandidates();
  }, []);

  useEffect(() => {
    const fetchCandidates = async () => {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `http://localhost:8080/candidates/searchName?query=${searchQuery}`,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.data.length > 0) {
        setCandidates(response.data);
        console.log(candidates);
      } else {
        setCandidates([]);
      }
    };

    const timer = setTimeout(() => {
      fetchCandidates();
    }, 300);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  const resetForm = () => {
    setDescription("");
    setStartDate("");
    setEndDate("");
    setLocation(""); // Reset location
    setSelectedCandidate(null);
  };

  const handleCandidateClick = (candidate) => {
    setSelectedCandidates((prevSelected) => [...prevSelected, candidate]);
    setCandidates((prevCandidates) =>
      prevCandidates.filter((c) => c.candidateId !== candidate.candidateId)
    );
  };

  const handleRemoveCandidate = (candidateToRemove) => {
    setSelectedCandidates((prevSelected) =>
      prevSelected.filter(
        (candidate) => candidate.candidateId !== candidateToRemove.candidateId
      )
    );
    setCandidates((prevCandidates) => [...prevCandidates, candidateToRemove]);
  };

  return (
    <div className="fixed z-10 inset-0 overflow-y-auto">
      <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 transition-opacity">
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>

          <div
            className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
            role="dialog"
            aria-modal="true"
            aria-labelledby="modal-headline"
          >
            <form onSubmit={handleSubmit} className="max-w-lg mx-auto ml-">
              <div className="mt-4 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="mt-4">
                  <label htmlFor="description" className="block text-gray-700">
                    Description:
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    value={description}
                    onChange={(event) => setDescription(event.target.value)}
                    required
                    className="form-input mt-1 block w-full"
                  />
                </div>
                <div className="mt-4">
                  <label className="block text-gray-700">
                    Selected Candidates:
                  </label>
                  <div className="flex flex-wrap">
                    {selectedCandidates.map((candidate) => (
                      <span
                        key={candidate.candidateId}
                        className="m-1 p-1 bg-blue-200 rounded"
                      >
                        {candidate.firstname} {candidate.lastname}
                        <button
                          type="button"
                          onClick={() => handleRemoveCandidate(candidate)}
                          className="ml-2 text-red-500"
                        >
                          Ã—
                        </button>
                      </span>
                    ))}
                  </div>
                </div>
                <div className="mt-4">
                  <label htmlFor="candidate" className="block text-gray-700">
                    Candidate:
                  </label>
                  <input
                    type="text"
                    id="candidate"
                    name="candidate"
                    value={searchQuery}
                    onChange={(event) => setSearchQuery(event.target.value)}
                    required
                    className="form-input mt-1 block w-full"
                    placeholder="Search for a candidate"
                  />

                  <ul
                    className="candidate-list mt-2 overflow-y-auto"
                    style={{ maxHeight: "150px" }}
                  >
                    {candidates.map((candidate) => (
                      <li
                        key={candidate.candidateId}
                        onClick={() => handleCandidateClick(candidate)}
                        className="cursor-pointer hover:bg-gray-200 px-3 py-1"
                      >
                        {candidate.firstname} {candidate.lastname}
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="mt-4">
                  <label htmlFor="startDate" className="block text-gray-700">
                    Start Date:
                  </label>
                  <input
                    type="datetime-local"
                    id="startDate"
                    name="startDate"
                    value={startDate}
                    onChange={(event) => setStartDate(event.target.value)}
                    required
                    className="form-input mt-1 block w-full"
                  />
                </div>

                <div className="mt-4">
                  <label htmlFor="endDate" className="block text-gray-700">
                    End Date:
                  </label>
                  <input
                    type="datetime-local"
                    id="endDate"
                    name="endDate"
                    value={endDate}
                    onChange={(event) => setEndDate(event.target.value)}
                    required
                    className="form-input mt-1 block w-full"
                  />
                </div>

                <div className="mt-4">
                  <label htmlFor="location" className="block text-gray-700">
                    Location:
                  </label>
                  <select
                    id="location"
                    name="location"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                    required
                    className="form-select mt-1 block w-full"
                  >
                    <option value="">Select a location</option>
                    {locations.map((loc) => (
                      <option key={loc.locationId} value={loc.city}>
                        {loc.city}, {loc.street}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                  <span className="flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto">
                    <button
                      type="submit"
                      className="inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-green-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-green-500 focus:outline-none focus:border-green-700 focus:shadow-outline-green transition ease-in-out duration-150 sm:text-sm"
                    >
                      Create Election
                    </button>
                  </span>
                  <span className="mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:w-auto">
                    <button
                      type="button"
                      onClick={closeModal}
                      className="inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm"
                    >
                      Cancel
                    </button>
                  </span>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddElectionModal;
